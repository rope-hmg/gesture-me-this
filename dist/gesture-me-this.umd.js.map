{"version":3,"file":"gesture-me-this.umd.js","sources":["../src/vector.ts","../src/metrics.ts","../src/finger.ts","../src/controller.ts","../src/gestures/pinch.ts"],"sourcesContent":["export class Vector {\n  constructor(\n    public x: number,\n    public y: number,\n  ) {}\n\n  add(rhs: ReadonlyVector, out = new Vector(0, 0)): Vector {\n    out.x = this.x + rhs.x;\n    out.y = this.y + rhs.y;\n\n    return out;\n  }\n\n  add_assign(rhs: ReadonlyVector): Vector {\n    return this.add(rhs, this);\n  }\n\n  sub(rhs: ReadonlyVector, out = new Vector(0, 0)): Vector {\n    out.x = this.x - rhs.x;\n    out.y = this.y - rhs.y;\n\n    return out;\n  }\n\n  sub_assign(rhs: ReadonlyVector): Vector {\n    return this.sub(rhs, this);\n  }\n\n  mul(rhs: number, out = new Vector(0, 0)): Vector {\n    out.x = this.x * rhs;\n    out.y = this.y * rhs;\n\n    return out;\n  }\n\n  mul_assign(rhs: number): Vector {\n    return this.mul(rhs, this);\n  }\n\n  div(rhs: number, out = new Vector(0, 0)): Vector {\n    return this.mul(1 / rhs, out);\n  }\n\n  div_assign(rhs: number): Vector {\n    return this.mul_assign(1 / rhs);\n  }\n\n  neg(out = new Vector(0, 0)): Vector {\n    return this.mul(-1, out);\n  }\n\n  neg_assign(): Vector {\n    return this.mul_assign(-1);\n  }\n\n  dot(rhs: ReadonlyVector): number {\n    return this.x * rhs.x + this.y * rhs.y;\n  }\n\n  cross(rhs: ReadonlyVector): number {\n    return this.x * rhs.y - this.y * rhs.x;\n  }\n\n  length_sq(): number {\n    return this.dot(this);\n  }\n\n  length(): number {\n    return Math.sqrt(this.length_sq());\n  }\n\n  normalise(out = new Vector(0, 0)): Vector {\n    return this.mul(1 / this.length(), out);\n  }\n\n  normalise_assign(): Vector {\n    return this.mul_assign(1 / this.length());\n  }\n\n  copy_from(rhs: ReadonlyVector): Vector {\n    this.x = rhs.x;\n    this.y = rhs.y;\n\n    return this;\n  }\n\n  set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport interface ReadonlyVector {\n  readonly x: number;\n  readonly y: number;\n\n  add(rhs: ReadonlyVector, out?: Vector): Vector;\n  sub(rhs: ReadonlyVector, out?: Vector): Vector;\n  mul(rhs: number, out?: Vector): Vector;\n  div(rhs: number, out?: Vector): Vector;\n  dot(rhs: ReadonlyVector): number;\n  cross(rhs: ReadonlyVector): number;\n  length_sq(): number;\n  length(): number;\n  normalise(out?: Vector): Vector;\n}\n\nexport type ReadonlyPoint = ReadonlyVector;\n","import { Vector, ReadonlyPoint } from \"./vector\";\nimport { Finger, ReadonlyFinger } from \"./finger\";\n\nexport class Metrics {\n  finger_count = 0;\n  fingers = new Map<number, Finger>();\n  centroid = new Vector(0, 0);\n\n  // average_finger_direction(): Vector {\n  //   const average_direction = new Vector(0, 0);\n\n  //   if (this.finger_count > 1) {\n  //     for (const finger of this.fingers.values()) {\n  //       average_direction.add_assign(finger.position_delta);\n  //     }\n\n  //     average_direction.div_assign(this.finger_count);\n  //   }\n\n  //   return average_direction;\n  // }\n}\n\nexport interface ReadonlyMetrics {\n  /** The number of fingers currently touching the screen */\n  readonly finger_count: number;\n\n  /** The finger data */\n  readonly fingers: ReadonlyMap<number, ReadonlyFinger>;\n\n  /** The average position of the fingers */\n  readonly centroid: ReadonlyPoint;\n\n  // average_finger_direction(): Vector;\n}\n","import { Vector, ReadonlyVector, ReadonlyPoint } from \"./vector\";\n\n/** Represents an  */\nexport class Finger {\n  position: Vector;\n  position_delta = new Vector(0, 0);\n  centroid_direction = new Vector(0, 0);\n\n  constructor(x: number, y: number) {\n    this.position = new Vector(x, y);\n  }\n\n  is_moving_toward_centroid(): boolean {\n    // We determine the direction of movement by taking the dot product of the centroid_direction\n    // and the position_delta. If the result is negative then the finger is moving away from the centroid.\n    //\n    // The position_delta moved us from the previous position to the current position.\n    // The centroid_direction is the vector from the finger's position to the centroid.\n    return this.position_delta.dot(this.centroid_direction) > 0;\n  }\n\n  /** Returns the angle around `point` that the finger moved in radians  */\n  angle_delta_around_point(point: Vector): number {\n    const previous_position_normal = this.position\n      .sub(this.position_delta)\n      .sub_assign(point)\n      .normalise_assign();\n\n    const current_position_normal = this.position.sub(point).normalise_assign();\n\n    return Math.acos(previous_position_normal.dot(current_position_normal));\n  }\n}\n\nexport interface ReadonlyFinger {\n  /** The position of the finger */\n  position: ReadonlyPoint;\n  /** The vector that translated the previous position to the current one  */\n  position_delta: ReadonlyVector;\n  /** The direction of the gesture's centoid from the finger's position */\n  centroid_direction: ReadonlyVector;\n\n  is_moving_toward_centroid(): boolean;\n  angle_delta_around_point(point: Vector): number;\n}\n","import { Metrics, ReadonlyMetrics } from \"./metrics\";\nimport { Finger } from \"./finger\";\n\nexport type TouchHandler = (\n  metrics: ReadonlyMetrics,\n  event: TouchEvent,\n) => void;\n\nexport type TouchHandlers = {\n  on_start?: TouchHandler;\n  on_move?: TouchHandler;\n  on_end?: TouchHandler;\n  on_cancel?: TouchHandler;\n};\n\ntype InternalTouchEventHandler = (event: TouchEvent) => void;\n\nexport class GestureController {\n  private metrics = new Metrics();\n\n  private on_start: InternalTouchEventHandler;\n  private on_move: InternalTouchEventHandler;\n  private on_end: InternalTouchEventHandler;\n  private on_cancel: InternalTouchEventHandler;\n\n  constructor(\n    private element: HTMLElement,\n\n    handlers: TouchHandlers,\n  ) {\n    const on_start: InternalTouchEventHandler = (event) => {\n      event.preventDefault();\n      this.initialise_touches(event.changedTouches);\n      handlers.on_start?.(this.metrics, event);\n    };\n\n    const on_move: InternalTouchEventHandler = (event) => {\n      event.preventDefault();\n      this.update_touches(event.changedTouches);\n      handlers.on_move?.(this.metrics, event);\n    };\n\n    const on_end: InternalTouchEventHandler = (event) => {\n      event.preventDefault();\n      this.remove_touches(event.changedTouches);\n      handlers.on_end?.(this.metrics, event);\n    };\n\n    const on_cancel: InternalTouchEventHandler = (event) => {\n      event.preventDefault();\n      this.remove_all_touches();\n      handlers.on_cancel?.(this.metrics, event);\n    };\n\n    element.addEventListener(\"touchstart\", on_start);\n    element.addEventListener(\"touchmove\", on_move);\n    element.addEventListener(\"touchend\", on_end);\n    element.addEventListener(\"touchcancel\", on_cancel);\n\n    this.on_start = on_start;\n    this.on_move = on_move;\n    this.on_end = on_end;\n    this.on_cancel = on_cancel;\n  }\n\n  /** Removes the touch event listeners from the element */\n  disableGestures(): void {\n    this.element.removeEventListener(\"touchstart\", this.on_start);\n    this.element.removeEventListener(\"touchmove\", this.on_move);\n    this.element.removeEventListener(\"touchmove\", this.on_end);\n    this.element.removeEventListener(\"touchmove\", this.on_cancel);\n  }\n\n  private initialise_touches(touches: TouchList): void {\n    this.metrics.finger_count += touches.length;\n\n    for (const touch of touches) {\n      const finger = new Finger(touch.clientX, touch.clientY);\n      this.metrics.fingers.set(touch.identifier, finger);\n    }\n\n    this.calculate_centroid();\n  }\n\n  private update_touches(touches: TouchList): void {\n    for (const touch of touches) {\n      const finger = this.metrics.fingers.get(touch.identifier);\n\n      if (finger) {\n        finger.position_delta.set(\n          touch.clientX - finger.position.x,\n          touch.clientY - finger.position.y,\n        );\n\n        finger.position.set(touch.clientX, touch.clientY);\n      }\n    }\n\n    this.calculate_centroid();\n  }\n\n  private remove_touches(touches: TouchList): void {\n    this.metrics.finger_count -= touches.length;\n\n    for (const touch of touches) {\n      this.metrics.fingers.delete(touch.identifier);\n    }\n\n    this.calculate_centroid();\n  }\n\n  private remove_all_touches(): void {\n    this.metrics.finger_count = 0;\n    this.metrics.fingers.clear();\n    this.metrics.centroid.set(0, 0);\n  }\n\n  private calculate_centroid(): void {\n    const { finger_count, fingers, centroid } = this.metrics;\n\n    centroid.set(0, 0);\n\n    for (const finger of fingers.values()) {\n      centroid.add_assign(finger.position);\n    }\n\n    if (finger_count > 1) {\n      centroid.div_assign(finger_count);\n    }\n\n    for (const finger of fingers.values()) {\n      centroid.sub(finger.position, finger.centroid_direction);\n    }\n  }\n}\n","import { GestureRecogniser, RecognitionOptions } from \".\";\n\nexport enum PinchDirection {\n  Inward,\n  Outward,\n}\n\nexport type PinchMetrics = {\n  /**\n   * The strength of the pinch. The value indicates the average travel distance of all the fingers.\n   */\n  readonly strength: number;\n\n  /**\n   * The direction of the pinch.\n   * - `PinchDirection.Inward` if the fingers are moving towards each other.\n   * - `PinchDirection.Outward` if the fingers are moving away from each other.\n   */\n  readonly direction: PinchDirection;\n};\n\nconst DEFAULT_PINCH_ZOOM_OPTIONS: RecognitionOptions = {\n  sensitivity: 0.5,\n};\n\n/**\n * Recognises a pinchZoom gesture.\n * @param metrics The metrics to recognise the gesture from.\n * @param options The options to use when recognising the gesture.\n * @param options.exactFingerCount The number of fingers required to recognise the gesture. If left undefined, the gesture recogniser is required to recognise any count that is valid for it. Defaults to `0.5`.\n * @param options.sensitivity The sensitivity of the gesture recogniser. The provided values should be normalised in the range [0, 1].\n * @returns A `RecognitionResult<PinchMetrics>` indicating whether the gesture was recognised or not.\n * @see PinchMetrics\n */\nexport const pinch_zoom: GestureRecogniser<PinchMetrics> = (\n  metrics,\n  options,\n) => {\n  const { exact_finger_count, sensitivity = 0.5 } =\n    options ?? DEFAULT_PINCH_ZOOM_OPTIONS;\n\n  const matches_finger_count =\n    (Boolean(exact_finger_count) &&\n      metrics.finger_count === exact_finger_count) ||\n    (!exact_finger_count && metrics.finger_count > 1);\n\n  let pinch_metrics: PinchMetrics | undefined;\n\n  if (matches_finger_count) {\n    const fingers = metrics.fingers.values();\n\n    let { value: finger, done } = fingers.next();\n    let moving_toward_centroid = finger.is_moving_toward_centroid();\n\n    let all_moving_in_same_direction = true;\n\n    while (!done && all_moving_in_same_direction) {\n      all_moving_in_same_direction =\n        moving_toward_centroid === finger.is_moving_toward_centroid();\n\n      ({ value: finger, done } = fingers.next());\n    }\n\n    if (all_moving_in_same_direction) {\n      const direction = moving_toward_centroid\n        ? PinchDirection.Inward\n        : PinchDirection.Outward;\n\n      // We determine the strength of the pinch by taking the average of the distances that each finger has moved.\n      let strength = 0;\n\n      for (const finger of metrics.fingers.values()) {\n        strength += finger.position_delta.length();\n      }\n\n      strength /= metrics.finger_count;\n      strength *= sensitivity;\n\n      pinch_metrics = { strength, direction };\n    }\n  }\n\n  return pinch_metrics\n    ? { is_recognised: true, metrics: pinch_metrics }\n    : { is_recognised: false };\n};\n"],"names":["Vector","x","y","rhs","out","Metrics","Finger","point","previous_position_normal","current_position_normal","GestureController","element","handlers","on_start","event","_a","on_move","on_end","on_cancel","touches","touch","finger","finger_count","fingers","centroid","PinchDirection","PinchDirection2","DEFAULT_PINCH_ZOOM_OPTIONS","pinch_zoom","metrics","options","exact_finger_count","sensitivity","matches_finger_count","pinch_metrics","done","moving_toward_centroid","all_moving_in_same_direction","direction","strength"],"mappings":"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"}